{
  "name": "Anarchism",
  "tagline": "React Stateless Components Library",
  "body": "# Anarchism\r\nReact components with NO STATE.\r\n\r\nAnarchism is a curated collection of [React](https://facebook.github.io/react/)\r\ncomponents intended to be used on unidirectional data flow architectures. The\r\nmost well known is probably [redux](http://redux.js.org/) (but also other\r\n[flux](http://facebook.github.io/flux/) like implementations); however any\r\napproach that may benefit from stateless components may be used as well (e.g.\r\nFRP libraries, GraphQL + [Relay](https://facebook.github.io/relay/), etc..).\r\n\r\nThe library contains two kind of components:\r\n- pure components they are stateless components with no side-effects. They are\r\nresponsible to render the visible part of your application. They are pure\r\nfunctions depending on props and context.\r\n- impure components they are wrapper or decorator components that are\r\nresponsible to deal with all the behaviors that may not be achieved without\r\nstate or some kind of side effects (e.g. DOM stuff). They are allowed to have\r\nsome state or side effects, but are not allowed to render anything visible, just\r\nwrap or decorate pure components.\r\n\r\nPresentational components should use the minimum set of css properties to define\r\ntheir behavior and/or structure, anything else should remain unstyled.\r\n\r\nA \"future first\" approach is preferred: use newest css and js features relying\r\non transpilers and polyfills to maximize compatibility and eventually apply\r\nspecific hacks only when polyfills are failing.\r\n\r\nAll the components will also play nicely when rendered on the server (isomorphic\r\napplications), especially impure components that are dealing with the DOM will\r\nhave fallback solutions when the `window` object is not available.\r\n\r\n## How to use it\r\nTo use anarchism components you just need to install anarchism\r\nas a dependency in your project:\r\n```\r\n$ npm install --save anarchism\r\n```\r\n\r\nthen simply import the components you want to use:\r\n```javascript\r\nimport { Intreact, Zlide } from 'anarchism';\r\n```\r\n\r\nand use them as normal React components according to the respective\r\ndocumentations.\r\n\r\n## What it is not\r\nThis project do not want to provide ready to use components\r\nwith a common design. You will not find the typical front-end elements you can\r\nexpect from common frameworks such as [bootstrap](http://getbootstrap.com/),\r\n[foundation](http://foundation.zurb.com/),\r\n[material-ui](http://www.material-ui.com/), etc...\r\n\r\nWhile those libraries are great for prototyping, you will always end up wanting\r\nto deeply change their style and behavior on real world projects. Given their\r\ncomplex nature, very often the effort to adapt them to our own necessities is\r\nhigher than writing from scratch a bunch of components.\r\n\r\nAlso, as far as we know, none of the well known front-end libraries are optimized\r\nto be used with unidirectional data flows and very often they rely heavily on\r\nstate and DOM events and manipulations.\r\n\r\nThe only stateless react components library know to us so far is\r\n[Rebass](http://jxnblk.com/rebass/), a really nice project that should work very\r\nwell for prototyping flux based applications. However it comes with its own\r\nstyle that you can eventually configure (on some of its aspects) using context\r\nproperties or overwrite when needed. In a real project you will probably end up\r\nanyway spending more time overriding stuff than actually composing your\r\napplication.\r\n\r\n## Why we need anarchism\r\nThis is an ongoing project where we want to collect\r\ncomponents that respect the above rules. Ideally every component should be as\r\nmuch minimalistic and abstract as possible and you should not feel the needs to\r\nchange it or to not being using all of its features.\r\n\r\nSometimes we end up implementing again and again the same behavioral pattern for\r\nlot of front-end components. A very basic example may be show different contents\r\non a div depending on props, or more complex things like a full-blown stateless\r\nslider with no interface or any other styling than the very strictly needed for\r\nlayout and animation.\r\n\r\nThis library want to abstract these patterns and its expected usage on real\r\nworld project would be to create complete and styled front-end components that\r\nuse anarchism components as dependencies to implement their behavior.\r\n\r\n## Want to contribute?\r\nThere are at least 4 ways to contribute to the project:\r\n- Adding very simple components that abstract some basic pattern directly inside\r\nthis repository\r\n- Open an issue to propose an external project (available on npm) that may fit\r\ninside the library\r\n- bug fixing, testing and cross-browser issues solving are always welcome\r\n- contribute to the example folder with interesting components created using\r\nanarchism\r\n\r\n## List of pure components\r\n- [zlide](https://github.com/zalando/react-zlide) - Lightweight and stateless\r\n  slider component for React.js\r\n- [callout](https://github.com/zalando/react-callout) - Lightweight and\r\n  stateless callout component for React.js\r\n- [zoom](https://github.com/zalando/react-zoom) - Lightweight and stateless\r\n  modal component for React.js based on flexbox\r\n\r\n## List of impure components\r\n- [intreact](https://github.com/zalando/intreact) - Handling interactions with\r\n  dumb react components.\r\n- [rezponsive](https://github.com/zalando/rezponsive) - React decorator for\r\n  responsive behaviors.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}